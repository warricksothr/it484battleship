{"ts":1354367604803,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function UI() {\n    this.showShipMap = function() {\n        if(false) {\n            document.getElementById('one').style.display = \"none\";\n            document.getElementById('shipone').style.display = \"block\";\n            return true;\n        }\n        else {\n            document.getElementById('two').style.display = \"none\";\n            document.getElementById('shiptwo').style.display = \"block\";\n            return true;\n        }\n        \n    };\n    \n    this.hideShipMap = function() {\n        if(false) {\n            document.getElementById('one').style.display = \"none\";\n            document.getElementById('shipone').style.display = \"block\";\n            return true;\n        }\n        else {\n            document.getElementById('two').style.display = \"none\";\n            document.getElementById('shiptwo').style.display = \"block\";\n            return true;\n        }\n        \n    };\n    \n    this.createShipGrid = function() {\n        var ship = engine.getShipGrids();\n        for (var i = 0; i < 10; i++) {\n                document.writeln(\"<tr id='r\"+i+\"'>\");\n                for (var j = 0; j < 10; j++) {\n                document.writeln(\"<td class='cloud' id='c\" + j + \"'>\"+ship[j][i]+\"</td>\");\n            }\n            document.writeln(\"</tr>\");\n        }\n    };\n    \n    this.createShotGrid = function() {\n        var shot = engine.getShotGrids();\n        for (var i = 0; i < 10; i++) {\n            document.writeln(\"<tr id='r\"+i+\"'>\");\n            for (var j = 0; j < 10; j++) {\n                document.writeln(\"<td class='cloud' id='c\" + j + \"'>\"+shot[j][i]+\"</td>\");\n            }\n            document.writeln(\"</tr>\");\n        }\n    };\n}"]],"start1":0,"start2":0,"length1":0,"length2":1658}]],"length":1658}
{"contributors":["nerian.drew@gmail.com"],"silentsave":false,"ts":1354399525061,"patch":[[{"diffs":[[0," UI("],[-1,") {\n    this.showShipMap = function() {\n        if(false) {\n            document.getElementById('one').style.display = \"none\";\n            document.getElementById('shipone').style.display = \"block\";\n            return true;\n        }\n        else {\n            document.getElementById('two').style.display = \"none\";\n            document.getElementById('shiptwo').style.display = \"block\";\n            return true;\n        }\n        \n    };\n    \n    this.hideShipMap = function() {\n        if(false) {\n            document.getElementById('one').style.display = \"none\";\n            document.getElementById('shipone').style.display = \"block\";\n            return true;\n        }\n        else {\n            document.getElementById('two').style.display = \"none\";\n            document.getElementById('shiptwo').style.display = \"block\";\n            return true;\n        }\n        \n    };\n    \n    this.createShipGrid = function() {\n        var ship = engine.getShipGrids();\n        for (var i = 0; i < 10; i++) {\n                document.writeln(\"<tr id='r\"+i+\"'>\");\n                for (var j = 0; j < 10; j++) {\n                document.writeln(\"<td class='cloud' id='c\" + j + \"'>\"+ship[j][i]+\"</td>\");\n            }\n            document.writeln(\"</tr>\");\n        }\n    };\n    \n    this.createShotGrid = function() {\n        var shot = engine.getShotGrids();\n        for (var i = 0; i < 10; i++) {\n            document.writeln(\"<tr id='r\"+i+\"'>\");\n            for (var j = 0; j < 10; j++) {\n                document.writeln(\"<td class='cloud' id='c\" + j + \"'>\"+shot[j][i]+\"</td>\");\n            }\n            document.writeln(\"</tr>\");\n        }\n    };\n}"],[1,"engine)\n{\n    ////////////////////\n    // Initialization //\n    ////////////////////\n    \n    //Always load after engine.js to ensure the latest engine is linked\n    this.engine = engine;\n    \n    ////////////////////\n    // Global Helpers //\n    ////////////////////\n    \n    // element to empty a dom element identified by id\n    this.helperEmptyElementById = function(elementId){\n        var element = this.helperGetElementById(elementId);\n        this.helperEmptyElement(element);\n    };\n    \n    // element to empty a dom element\n    this.helperEmptyElement = function(element){\n        while(element.hasChildNodes())\n        {\n            element.removeChild(element.firstChild);\n        }\n    };\n    \n    //write the html to the requested element\n    this.helperAppendHTMLToElementById = function(elementId, htmlToWrite)\n    {\n        var parentElement = this.helperGetElementById(elementId);\n        //insert our html into the parent element\n        this.helperAppendHTMLToElement(parentElement, htmlToWrite);\n    };\n    \n    //write HTML to the body of an element\n    this.helperAppendHTMLToElement = function(element, htmlToWrite)\n    {\n        element.innerHTML = element.innerHTML + htmlToWrite;\n    };\n    \n    //append an element as a child to a parent element\n    this.helperAppendChildElement = function(parentElement, childElement)\n    {\n        parentElement.appendChild(childElement);\n    };\n    \n    //helper method to construct an dom element\n    this.helperCreateElement = function(elementName, elementAttributes, elementTextContent)\n    {\n        var newElement = document.createElement(elementName);\n        //loop through all the properties of elementAttributes and add them as attributes\n        for(var propt in elementAttributes){\n            //add an attribute based on the name with a value from the property\n            newElement.setAttribute(propt, elementAttributes[propt]);\n        }\n        newElement.textContent = elementTextContent;\n        return newElement;\n    };\n    \n    //simply retreve a dom element from the current document identified by id\n    this.helperGetElementById = function(elementId)\n    {\n        return document.getElementById(elementId);\n    };\n    \n    ////////////////////\n    // Update Methods //\n    ////////////////////\n    \n    //updates the user interface\n    this.updateInterface = function(params)\n    {\n        //autopopulate the params with defaults if we weren't passed some\n        if (typeof(params) === 'undefined')\n        {\n            params = {\n            historyID:\"history\",\n            shotID:\"shot\",\n            ship:\"ship\",\n            shipViewID:\"shipview\"\n            };\n        }\n        //create the history\n        this.createHistory(params.historyID);\n        //create the shot grid\n        this.createShotGrid(params.shotID);\n        //create the ship grid\n        this.createShipGrid(params.shipID);\n        //hide the ship grid by default\n        this.hideShipGrid();\n        //create the ship view\n        this.createShipView(params.shipViewID);\n    };\n    \n    ////////////////////////////////////\n    // Show/Hide Ship Grids Functions //\n    ////////////////////////////////////\n    \n    this.showShipGrid = function()\n    {\n        document.getElementById('shot').style.display = \"none\";\n        document.getElementById('ship').style.display = \"block\";\n    };\n    \n    this.hideShipGrid = function()\n    {\n        document.getElementById('shot').style.display = \"block\";\n        document.getElementById('ship').style.display = \"none\";\n    };\n    \n    ////////////////////////////\n    // Grid drawing functions //\n    ////////////////////////////\n    \n    // for shot grids //\n    \n    //helper method to create the correct grid type from the cell\n    this.helperGetShotGridCell = function(type, j)\n    {\n        var classType = \"\";\n        var typeToDisplay = \"U\";\n        //switch on the type in the cell \n        switch(type)\n        {\n            //fog of war\n            case 0: \n                classType = \"cloud\";\n                typeToDisplay = \"F\";\n                break;\n            //miss\n            case 1: \n                classType = \"miss\";\n                typeToDisplay = \"M\";\n                break;\n            //hit\n            case 2: \n                classType = \"hit\";\n                typeToDisplay = \"H\";\n                break;\n            //reveal miss\n            case 3: \n                classType = \"revealmiss\";\n                typeToDisplay = \"RM\";\n                break;\n            //reveal hit\n            case 4: \n                classType = \"revealhit\";\n                typeToDisplay = \"RH\";\n                break;\n        }\n        var gridCell = this.helperCreateElement(\"td\", {\"class\":classType, \"id\":\"c\" + j}, typeToDisplay);\n        //by now gridCell should represent like this if it is a type 0 and j is 0 (<td class='cloud' id='c0'>0</td>)\n        return gridCell;\n    };\n    \n    //helper method to draw the supplied grid\n    this.helperCreateShotGrid = function(grid, gridElementId)\n    {\n        //empty the grid\n        this.helperEmptyElementById(gridElementId);\n        //get the container\n        var rootElement = this.helperGetElementById(gridElementId);\n        //create the table\n        var table = this.helperCreateElement(\"table\", {}, \"\");\n        for (var i = 0; i < 10; i++) {\n            //write the row to the table body\n            var row = this.helperCreateElement(\"tr\", {id:\"r\"+i},\"\");\n            for (var j = 0; j < 10; j++) {\n                //write a column to the table\n                //get the appropriate cell contents and write the column\n                var gridCell = this.helperGetShotGridCell(grid[j][i], j);\n                this.helperAppendChildElement(row, gridCell);\n            }\n            //add the row to the table\n            this.helperAppendChildElement(table, row);\n        }\n        //finally write the table to the root element\n        this.helperAppendChildElement(rootElement, table);\n    };\n    \n    //draw the current players shot grid\n    this.createShotGrid = function(gridElementId)\n    {\n        if(!gridElementId) { gridElementId = \"shot\"; }\n        var grid = this.engine.getShotGrid();\n        this.helperCreateShotGrid(grid, gridElementId);\n    };\n    \n    // for ship grids //\n    \n    //helper method to create the correct grid type from the cell\n    this.helperGetShipGridCell = function(type, enemyType, j)\n    {\n        var classType = \"\";\n        var typeToDisplay = \"U\";\n        //switch on the type in the cell\n        switch(enemyType)\n        {\n            //fog of war\n            case 0: \n                classType = \"cloud\";\n                typeToDisplay = \"F\"\n                break;\n            //miss\n            case 1: \n                classType = \"miss\";\n                typeToDisplay = \"M\"\n                break;\n            //hit on one of our ships\n            case 2: \n                classType = \"shiphit\";\n                typeToDisplay = type.name[0];\n                break;\n            //reveal miss\n            case 3: \n                classType = \"revealmiss\";\n                typeToDisplay = \"RM\"\n                break;\n            //reveal hit\n            case 4: \n                classType = \"revealhit\";\n                typeToDisplay = \"RH-\" + type.name[0];\n                break;\n        }\n        //miss on one of our ships\n        if (enemyType === 0 && type !== 0)\n        {\n            classType = \"shipmiss\";\n            typeToDisplay = type.name[0];\n        }\n        var gridCell = this.helperCreateElement(\"td\", {\"class\":classType, \"id\":\"c\" + j}, typeToDisplay);\n        //by now gridCell should represent like this if it is a type 0 and j is 0 (<td class='cloud' id='c0'>0</td>)\n        return gridCell;\n    };\n    \n    //helper method to draw the supplied grid\n    this.helperCreateShipGrid = function(grid, enemyShotGrid, gridElementId)\n    {\n        //empty the grid\n        this.helperEmptyElementById(gridElementId);\n        //get the container\n        var rootElement = this.helperGetElementById(gridElementId);\n        //create the table\n        var table = this.helperCreateElement(\"table\", {}, \"\");\n        for (var i = 0; i < 10; i++) {\n            //write the row to the table body\n            var row = this.helperCreateElement(\"tr\", {id:\"r\"+i},\"\");\n            for (var j = 0; j < 10; j++) {\n                //write a column to the table\n                //get the appropriate cell contents and write the column\n                var gridCell = this.helperGetShipGridCell(grid[j][i], enemyShotGrid[j][i], j);\n                this.helperAppendChildElement(row, gridCell);\n            }\n            //add the row to the table\n            this.helperAppendChildElement(table, row);\n        }\n        //finally write the table to the root element\n        this.helperAppendChildElement(rootElement, table);\n    };\n    \n    //draw the current player's ship grid\n    this.createShipGrid = function(gridElementId)\n    {\n        if(!gridElementId) { gridElementId = \"ship\"; }\n        var grid = this.engine.getShipGrid();\n        var enemyShotGrid = this.engine.getEnemyShotGrid();\n        this.helperCreateShipGrid(grid, enemyShotGrid,  gridElementId);\n    };\n    \n    ///////////////////////\n    // History Functions //\n    ///////////////////////\n    \n    //show the history for the current player\n    this.createHistory = function(gridElementId)\n    {\n        var rootElement = this.helperGetElementById(gridElementId);\n        //empty the current history\n        this.helperEmptyElement(rootElement);\n        //create the heading\n        var heading = this.helperCreateElement(\"h2\", {\"class\":\"headings\"}, \"History\");\n        this.helperAppendChildElement(rootElement, heading);\n        \n        //populate the history\n        var history = this.engine.getShotHistory();\n        //print out \"no history\" if there is no history yet\n        if (!history || history.length < 1)\n        {\n            var noHist = this.helperCreateElement(\"span\", {}, \"No History\");\n            this.helperAppendChildElement(rootElement, noHist);\n        }\n        //otherwise print the history\n        else\n        {\n            //need to implement a limit (aka. recent history otherwise we will over flow, we could also make it a scrollable box)\n            for (var i = 0; i < history.length; i++)\n            {\n                //write out the history\n                var hist = this.helperCreateElement(\"span\", {id:\"historyRow\"}, history[i]);\n                this.helperAppendChildElement(rootElement, hist);\n                //append a line break\n                this.helperAppendHTMLToElement(rootElement, \"<br>\");\n            }\n        }\n    };\n    \n    /////////////////////////\n    // Ship View Functions //\n    /////////////////////////\n    \n    //a helper method to determine if a cell should be red or not\n    this.helperShipViewGetClass = function(ship, currentCount)\n    {\n        if (currentCount < ship.damage)\n        {\n            return \"segmenthit\";\n        }\n        else\n        {\n            return \"segment\";\n        }\n    };\n    \n    this.createShipView = function(shipViewElementId)\n    {\n        //get a list of the current player ships\n        var ships = engine.getPlayerShips();\n        //get access to the root element in the DOM\n        var rootElement = this.helperGetElementById(shipViewElementId);\n        //empty the element\n        this.helperEmptyElement(rootElement);\n        //loop through the ships and create the elements\n        for (var i = 0; i < ships.length; i++)\n        {\n            //get the ship\n            var ship = ships[i];\n            //create an element for this ship\n            var shipElement = this.helperCreateElement(\"div\", {id:ship.name, \"class\":\"ship\"}, \"\");\n            //loop through each cell in the length of the ship\n            for (var x = 0; x < ship.shipLength; x++)\n            {\n                //determine if the section should be hit or not\n                var cellClass = this.helperShipViewGetClass(ship, x);\n                //create the cell for the ship\n                var shipCellElement = this.helperCreateElement(\"div\", {id:\"s\"+(i+1)+\"p\"+(x+1), \"class\":cellClass}, \"\");\n                //append it to the ship\n                this.helperAppendChildElement(shipElement, shipCellElement);\n            }\n            //append the ship to the root\n            this.helperAppendChildElement(rootElement, shipElement);\n        }\n    };\n}\n\n//create a new UI instance and import ENGINE into it\nvar UI = new UI(ENGINE);"]],"start1":8,"start2":8,"length1":1650,"length2":12526}]],"length":12534,"saved":false}
